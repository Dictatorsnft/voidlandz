// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 2cuDFUXxXegfBqeyzrcCDf
// Component: kfgyQqEyCn
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: 2cuDFUXxXegfBqeyzrcCDf/projectcss
import sty from "./PlasmicAuctionz.module.css"; // plasmic-import: kfgyQqEyCn/css

export type PlasmicAuctionz__VariantMembers = {};
export type PlasmicAuctionz__VariantsArgs = {};
type VariantPropType = keyof PlasmicAuctionz__VariantsArgs;
export const PlasmicAuctionz__VariantProps = new Array<VariantPropType>();

export type PlasmicAuctionz__ArgsType = {};
type ArgPropType = keyof PlasmicAuctionz__ArgsType;
export const PlasmicAuctionz__ArgProps = new Array<ArgPropType>();

export type PlasmicAuctionz__OverridesType = {
  layer41?: p.Flex<"div">;
  h3?: p.Flex<"h3">;
};

export interface DefaultAuctionzProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicAuctionz__RenderFunc(props: {
  variants: PlasmicAuctionz__VariantsArgs;
  args: PlasmicAuctionz__ArgsType;
  overrides: PlasmicAuctionz__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const [isLayer41Hover, triggerLayer41HoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_layer41: isLayer41Hover
  };

  return (
    <div
      data-plasmic-name={"layer41"}
      data-plasmic-override={overrides.layer41}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.layer41
      )}
      data-plasmic-trigger-props={[triggerLayer41HoverProps]}
    >
      {(triggers.hover_layer41 ? true : false) ? (
        <h3
          data-plasmic-name={"h3"}
          data-plasmic-override={overrides.h3}
          className={classNames(
            projectcss.all,
            projectcss.h3,
            projectcss.__wab_text,
            sty.h3
          )}
        >
          {"AUCTIONZ"}
        </h3>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  layer41: ["layer41", "h3"],
  h3: ["h3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  layer41: "div";
  h3: "h3";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAuctionz__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAuctionz__VariantsArgs;
    args?: PlasmicAuctionz__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAuctionz__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAuctionz__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAuctionz__ArgProps,
          internalVariantPropNames: PlasmicAuctionz__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicAuctionz__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "layer41") {
    func.displayName = "PlasmicAuctionz";
  } else {
    func.displayName = `PlasmicAuctionz.${nodeName}`;
  }
  return func;
}

export const PlasmicAuctionz = Object.assign(
  // Top-level PlasmicAuctionz renders the root element
  makeNodeComponent("layer41"),
  {
    // Helper components rendering sub-elements
    h3: makeNodeComponent("h3"),

    // Metadata about props expected for PlasmicAuctionz
    internalVariantProps: PlasmicAuctionz__VariantProps,
    internalArgProps: PlasmicAuctionz__ArgProps
  }
);

export default PlasmicAuctionz;
/* prettier-ignore-end */
